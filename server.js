require("dotenv").config(); // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
const express = require("express");
const { Pool } = require("pg");
const WebSocket = require("ws");
const http = require("http");

const app = express();
const port = process.env.PORT || 3000; // üìå –î–µ–ª–∞–µ–º –ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º

// –°–æ–∑–¥–∞—ë–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Express –∏ WebSocket
const server = http.createServer(app);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }, // üìå Railway —Ç—Ä–µ–±—É–µ—Ç SSL
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
pool
  .connect()
  .then(() => console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL"))
  .catch((err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:", err);
    process.exit(1);
  });

// üìå –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Express-—Å–µ—Ä–≤–µ—Ä–∞
app.get("/", (req, res) => {
  res.send("üöÄ –ë—ç–∫–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
});

// –°–æ–∑–¥–∞—ë–º WebSocket-—Å–µ—Ä–≤–µ—Ä –Ω–∞ —Ç–æ–º –∂–µ HTTP-—Å–µ—Ä–≤–µ—Ä–µ
const wss = new WebSocket.Server({ server });

wss.on("connection", (ws) => {
  console.log("üîå –ù–æ–≤–æ–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");

  ws.on("message", async (message) => {
    try {
      const data = JSON.parse(message); // ‚úÖ –ü–∞—Ä—Å–∏–º JSON
      console.log("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", data);

      if (data.type === "ping") {
        ws.send(JSON.stringify({ type: "pong" })); // ‚úÖ –û—Ç–≤–µ—á–∞–µ–º "pong"
        return;
      }

      if (data.type === "save_message") {
        // üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (!data.message || typeof data.message !== "string") {
          ws.send(
            JSON.stringify({
              type: "error",
              message: "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π!",
            })
          );
          return;
        }

        // üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ PostgreSQL
        const result = await pool.query(
          "INSERT INTO messages (text) VALUES ($1) RETURNING *",
          [data.message]
        );
        ws.send(
          JSON.stringify({ type: "db_response", message: result.rows[0] })
        );
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", message);
      ws.send(JSON.stringify({ type: "error", message: "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON" }));
    }
  });

  // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "ping" –∫–ª–∏–µ–Ω—Ç—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  ws.send(JSON.stringify({ type: "ping" }));
});

console.log(`üöÄ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:${port}`);

// üìå –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä (Express + WebSocket)
server.listen(port, () => {
  console.log(`üöÄ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
});

// üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
process.on("SIGINT", () => {
  console.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...");
  wss.close(() => {
    console.log("‚úÖ WebSocket-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    process.exit(0);
  });
});
